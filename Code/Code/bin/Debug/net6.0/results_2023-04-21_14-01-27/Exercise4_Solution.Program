╔═══════════════════Exercise4_Solution.Program═══════════════════╗
╟───────────────Test HeapBottomUp with empty array───────────────╢
> Input:    []
> Expected: []
> Actual:   []
╟─────────────────────────────Passed─────────────────────────────╢
╠════════════════════════════════════════════════════════════════╣
╟───────────────Test HeapBottomUp with one element───────────────╢
> Input:    [1]
> Expected: [1]
> Actual:   [1]
╟─────────────────────────────Passed─────────────────────────────╢
╠════════════════════════════════════════════════════════════════╣
╟──Test HeapBottomUp with five elements, sorted in random order──╢
> Input:    [1,3,2,5,4]
> Expected: [5,4,2,3,1]
> Actual:   [5,4,2,3,1]
╟─────────────────────────────Passed─────────────────────────────╢
╠════════════════════════════════════════════════════════════════╣
╟─────────────Test MaxKeyDelete with heap of size 1──────────────╢
> Input:    [1]
> Expected: [1]
> Actual:   [1]
╟─────────────────────────────Passed─────────────────────────────╢
╠════════════════════════════════════════════════════════════════╣
╟─────────────Test MaxKeyDelete with heap of size 2──────────────╢
> Input:    [2,1]
> Expected: [1,2]
> Actual:   [1,2]
╟─────────────────────────────Passed─────────────────────────────╢
╠════════════════════════════════════════════════════════════════╣
╟─────────────Test MaxKeyDelete with heap of size 5──────────────╢
> Input:    [5,4,2,3,1]
> Expected: [4,3,2,1,5]
> Actual:   [1,4,2,3,5]
╟─────────────────────────────Failed─────────────────────────────╢
╠════════════════════════════════════════════════════════════════╣
╟──────────────Test MaxKeyDelete with zero element───────────────╢
> Input:    []
> Expected: []
> Actual:   []
╟─────────────────────────────Passed─────────────────────────────╢
╠════════════════════════════════════════════════════════════════╣
╟─────────────────Test HeapSort with empty array─────────────────╢
> Input:    []
> Expected: []
> Actual:   []
╟─────────────────────────────Passed─────────────────────────────╢
╠════════════════════════════════════════════════════════════════╣
╟─────────────────Test HeapSort with one element─────────────────╢
> Input:    [1]
> Expected: [1]
> Actual:   [1]
╟─────────────────────────────Passed─────────────────────────────╢
╠════════════════════════════════════════════════════════════════╣
╟────Test HeapSort with five elements, sorted in random order────╢
> Input:    [1,3,2,5,4]
> Expected: [1,2,3,4,5]
> Actual:   [1,3,2,5,4]
╟─────────────────────────────Failed─────────────────────────────╢
╠════════════════════════════════════════════════════════════════╣
╟──Test HeapSort with five elements, sorted in ascending order───╢
> Input:    [1,2,3,4,5]
> Expected: [1,2,3,4,5]
> Actual:   [1,2,3,4,5]
╟─────────────────────────────Passed─────────────────────────────╢
╠════════════════════════════════════════════════════════════════╣
╟──Test HeapSort with five elements, sorted in descending order──╢
> Input:    [5,4,3,2,1]
> Expected: [1,2,3,4,5]
> Actual:   [5,4,3,2,1]
╟─────────────────────────────Failed─────────────────────────────╢
╠════════════════════════════════════════════════════════════════╣
╟───────────────Test HeapSort with random elements───────────────╢
> Input:    [723,238,43,31,722,318,463,805,293,131]
> Expected: Array should be sorted in non-descending order
> Actual:   [723,238,43,31,722,318,463,805,293,131]
╟─────────────────────────────Failed─────────────────────────────╢
╠════════════════════════════════════════════════════════════════╣
╙─────────────────────────9 / 13 passed──────────────────────────╜
